---
source: crates/formatter/tests/parser.rs
---
(module
  (func (export "empty") (param i32)
    (if
      (local.get 0)
      (then))
    (if
      (local.get 0)
      (then)
      (else))
    (if $l
      (local.get 0)
      (then))
    (if $l
      (local.get 0)
      (then)
      (else)))

  (func (export "singular") (param i32) (result i32)
    (if
      (local.get 0)
      (then
        (nop)))
    (if
      (local.get 0)
      (then
        (nop))
      (else
        (nop)))
    (if (result i32)
      (local.get 0)
      (then
        (i32.const 7))
      (else
        (i32.const 8))))

  (func (export "multi") (param i32) (result i32 i32)
    (if
      (local.get 0)
      (then
        (call $dummy)
        (call $dummy)))
    (if
      (local.get 0)
      (then)
      (else
        (call $dummy)
        (call $dummy)))
    (if (result i32)
      (local.get 0)
      (then
        (call $dummy)
        (i32.const 8))
      (else
        (call $dummy)
        (i32.const 9)))
    (if (result i32 i64 i32)
      (local.get 0)
      (then
        (call $dummy)
        (i32.const 1)
        (call $dummy)
        (i64.const 2)
        (call $dummy)
        (i32.const 3))
      (else
        (call $dummy)
        (i32.const -1)
        (call $dummy)
        (i64.const -2)
        (call $dummy)
        (i32.const -3))))

  (func (export "nested") (param i32 i32) (result i32)
    (if (result i32)
      (local.get 0)
      (then
        (if
          (local.get 1)
          (then
            (call $dummy)
            (block)
            (nop)))
        (if
          (local.get 1)
          (then)
          (else
            (call $dummy)
            (block)
            (nop)))
        (if (result i32)
          (local.get 1)
          (then
            (call $dummy)
            (i32.const 9))
          (else
            (call $dummy)
            (i32.const 10))))
      (else
        (if
          (local.get 1)
          (then
            (call $dummy)
            (block)
            (nop)))
        (if
          (local.get 1)
          (then)
          (else
            (call $dummy)
            (block)
            (nop)))
        (if (result i32)
          (local.get 1)
          (then
            (call $dummy)
            (i32.const 10))
          (else
            (call $dummy)
            (i32.const 11))))))

  (func (export "as-select-first") (param i32) (result i32)
    (select
      (if (result i32)
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (i32.const 2)
      (i32.const 3)))
  (func (export "as-select-mid") (param i32) (result i32)
    (select
      (i32.const 2)
      (if (result i32)
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (i32.const 3)))
  (func (export "as-select-last") (param i32) (result i32)
    (select
      (i32.const 2)
      (i32.const 3)
      (if (result i32)
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))))

  (func (export "as-loop-first") (param i32) (result i32)
    (loop (result i32)
      (if (result i32)
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (call $dummy)
      (call $dummy)))
  (func (export "as-loop-mid") (param i32) (result i32)
    (loop (result i32)
      (call $dummy)
      (if (result i32)
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))
      (call $dummy)))
  (func (export "as-loop-last") (param i32) (result i32)
    (loop (result i32)
      (call $dummy)
      (call $dummy)
      (if (result i32)
        (local.get 0)
        (then
          (call $dummy)
          (i32.const 1))
        (else
          (call $dummy)
          (i32.const 0)))))

  (func (export "as-if-condition") (param i32) (result i32)
    (if (result i32)
      (if (result i32)
        (local.get 0)
        (then
          (i32.const 1))
        (else
          (i32.const 0)))
      (then
        (call $dummy)
        (i32.const 2))
      (else
        (call $dummy)
        (i32.const 3))))

  (func (export "param") (param i32) (result i32)
    (if (param i32) (result i32)
      (local.get 0)
      (then
        (i32.const 2)
        (i32.add))
      (else
        (i32.const -2)
        (i32.add))))
  (func (export "params") (param i32) (result i32)
    (if (param i32 i32) (result i32)
      (local.get 0)
      (then
        (i32.add))
      (else
        (i32.sub))))

  (func (export "type-use")
    (if (type $block-sig-1)
      (i32.const 1)
      (then))
    (if (type $block-sig-2)
      (i32.const 1)
      (then
        (i32.const 0))
      (else
        (i32.const 2)))
    (if (type $block-sig-2) (result i32)
      (i32.const 1)
      (then
        (i32.const 0))
      (else
        (i32.const 2)))
    (if (type $block-sig-3) (param i32)
      (i32.const 1)
      (then
        (drop))
      (else
        (drop)))
    (if (type $block-sig-4)
      (param i32) (param f64 i32) (result i32 f64) (result i32)
      (i32.const 1)
      (then))))
